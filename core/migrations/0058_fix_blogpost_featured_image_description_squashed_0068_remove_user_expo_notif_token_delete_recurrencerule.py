# Generated by Django 4.1.10 on 2023-09-22 00:56
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models
from django.db.migrations import DeleteModel

import core.models.post


def reset_description(apps, schema_editor):
    BlogPost = apps.get_model("core", "BlogPost")
    BlogPost.objects.filter(
        featured_image_description="This image has no description."
    ).update(featured_image_description="")


def delete_recurrencerule(apps, schema_editor):
    try:
        RecurrenceRule = apps.get_model("core", "RecurrenceRule")
        DeleteModel("RecurrenceRule")
    except LookupError:
        pass


class Migration(migrations.Migration):
    dependencies = [
        ("contenttypes", "0002_remove_content_type_name"),
        ("core", "0057_alter_blogpost_featured_image_description"),
    ]

    operations = [
        migrations.RunPython(
            code=reset_description,
            reverse_code=migrations.RunPython.noop,
        ),
        migrations.AddField(
            model_name="event",
            name="should_announce",
            field=models.BooleanField(
                default=False,
                help_text="Whether if this event should be announced to the general school population VIA the important events feed.",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="expo_notif_tokens",
            field=models.JSONField(
                default=dict,
                help_text="JSON object with keys as tokens and values as null.",
                verbose_name="Expo Notifications Tokens",
            ),
        ),
        migrations.CreateModel(
            name="Exhibit",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created_date", models.DateTimeField(auto_now_add=True)),
                ("last_modified_date", models.DateTimeField(auto_now=True)),
                (
                    "show_after",
                    models.DateTimeField(
                        help_text="Show this announcement after this time.",
                        verbose_name="Automatically post on",
                    ),
                ),
                ("title", models.CharField(max_length=64)),
                ("body", models.TextField()),
                ("slug", models.SlugField(unique=True)),
                (
                    "content",
                    models.ImageField(
                        default="featured_image/default.png",
                        upload_to=core.models.post.featured_image_file_path_generator,
                    ),
                ),
                (
                    "content_description",
                    models.CharField(
                        help_text="Alt text for the featured image e.g. what screen readers tell users",
                        max_length=140,
                    ),
                ),
                ("is_published", models.BooleanField(default=False)),
                (
                    "author",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="%(class)ss_authored",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "tags",
                    models.ManyToManyField(
                        blank=True,
                        related_name="%(class)ss",
                        related_query_name="%(class)s",
                        to="core.tag",
                    ),
                ),
            ],
            options={
                "ordering": ["-created_date"],
            },
        ),
        migrations.AlterField(
            model_name="user",
            name="graduating_year",
            field=models.PositiveSmallIntegerField(
                blank=True,
                choices=[
                    (None, "Does not apply"),
                    (2024, 2024),
                    (2025, 2025),
                    (2026, 2026),
                    (2027, 2027),
                ],
                null=True,
            ),
        ),
        migrations.AddField(
            model_name="blogpost",
            name="is_archived",
            field=models.BooleanField(
                default=False,
                help_text="Archived posts are not shown on the blog page.",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="saved_announcements",
            field=models.ManyToManyField(blank=True, to="core.announcement"),
        ),
        migrations.AddField(
            model_name="user",
            name="saved_blogs",
            field=models.ManyToManyField(blank=True, to="core.blogpost"),
        ),
        migrations.CreateModel(
            name="Like",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                (
                    "object_id",
                    models.PositiveIntegerField(
                        help_text="The id of the object this comment is on"
                    ),
                ),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=models.SET(None), to=settings.AUTH_USER_MODEL
                    ),
                ),
                (
                    "content_type",
                    models.ForeignKey(
                        help_text="The type of object this comment is on (core | blog post or core | announcement)",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
            ],
            options={
                "abstract": False,
            },
        ),
        migrations.CreateModel(
            name="Comment",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                (
                    "object_id",
                    models.PositiveIntegerField(
                        help_text="The id of the object this comment is on"
                    ),
                ),
                ("body", models.TextField(max_length=512, default="Hello!")),
                (
                    "live",
                    models.BooleanField(default=False, help_text="Shown publicly?"),
                ),
                (
                    "author",
                    models.ForeignKey(
                        on_delete=models.SET(None), to=settings.AUTH_USER_MODEL
                    ),
                ),
                (
                    "content_type",
                    models.ForeignKey(
                        help_text="The type of object this comment is on (core | blog post or core | announcement)",
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "likes",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The users who liked this comment",
                        to="core.like",
                    ),
                ),
                (
                    "parent",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="children",
                        to="core.comment",
                    ),
                ),
            ],
            options={
                "ordering": ["created"],
                "permissions": (("view_nodelay", "View without delay"),),
            },
        ),
        migrations.AddField(
            model_name="announcement",
            name="likes",
            field=models.ManyToManyField(blank=True, to="core.like"),
        ),
        migrations.AddField(
            model_name="blogpost",
            name="likes",
            field=models.ManyToManyField(blank=True, to="core.like"),
        ),
        migrations.AddIndex(
            model_name="comment",
            index=models.Index(
                fields=["content_type", "object_id"],
                name="core_commen_content_37d5bd_idx",
            ),
        ),
        migrations.AlterModelOptions(
            name="comment",
            options={
                "ordering": ["created_at"],
                "permissions": (("view_flagged", "View flagged comments"),),
            },
        ),
        migrations.RenameField(
            model_name="comment",
            old_name="created",
            new_name="created_at",
        ),
        migrations.RenameField(
            model_name="like",
            old_name="created",
            new_name="created_at",
        ),
        migrations.AddField(
            model_name="comment",
            name="last_modified",
            field=models.DateTimeField(
                auto_now_add=True, default=django.utils.timezone.now
            ),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name="comment",
            name="author",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=models.SET("[deleted]"),
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterField(
            model_name="like",
            name="author",
            field=models.ForeignKey(
                blank=True,
                null=True,
                on_delete=models.SET("[deleted]"),
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterField(
            model_name="announcement",
            name="author",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="%(class)ss_authored",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterField(
            model_name="announcement",
            name="tags",
            field=models.ManyToManyField(
                blank=True,
                related_name="%(class)ss",
                related_query_name="%(class)s",
                to="core.tag",
            ),
        ),
        migrations.AlterField(
            model_name="blogpost",
            name="author",
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.SET_NULL,
                related_name="%(class)ss_authored",
                to=settings.AUTH_USER_MODEL,
            ),
        ),
        migrations.AlterField(
            model_name="blogpost",
            name="last_modified_date",
            field=models.DateTimeField(auto_now_add=True),
        ),
        migrations.AlterField(
            model_name="blogpost",
            name="tags",
            field=models.ManyToManyField(
                blank=True,
                related_name="%(class)ss",
                related_query_name="%(class)s",
                to="core.tag",
            ),
        ),
        migrations.AlterField(
            model_name="comment",
            name="body",
            field=models.TextField(max_length=512, null=True, default="Hello!"),
        ),
        migrations.AlterField(
            model_name="comment",
            name="created_at",
            field=models.DateTimeField(auto_now_add=True, null=True),
        ),
        migrations.AlterField(
            model_name="like",
            name="created_at",
            field=models.DateTimeField(auto_now_add=True, null=True),
        ),
        migrations.CreateModel(
            name="CommentHistory",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("body", models.TextField(max_length=512, null=True)),
                ("created_at", models.DateTimeField(auto_now_add=True, null=True)),
                (
                    "Comment",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE, to="core.comment"
                    ),
                ),
            ],
        ),
        migrations.AddField(
            model_name="comment",
            name="history",
            field=models.ManyToManyField(blank=True, to="core.commenthistory"),
        ),
        migrations.RemoveField(
            model_name="announcement",
            name="likes",
        ),
        migrations.RemoveField(
            model_name="blogpost",
            name="likes",
        ),
        migrations.RemoveField(
            model_name="comment",
            name="likes",
        ),
        migrations.RunPython(
            code=delete_recurrencerule,
            reverse_code=migrations.RunPython.noop,
        ),
    ]
